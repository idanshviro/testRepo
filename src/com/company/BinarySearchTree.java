package com.company;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
//Valid Comments:

#video: 99767 - Binary Search Tree
--video: 99767 - Binary Search Tree
/* video: 99767 - Binary Search Tree */
<!--video: 99767 - Binary Search Tree-->

#doc: 99767 - Binary Search Tree
--doc: 99767 - Binary Search Tree
/* doc: 99767 - Binary Search Tree */
<!--doc: 99767 - Binary Search Tree-->
    
//Not a valid comments:
//videoYysd
//doc@#$##video
//videodoc:
public class BinarySearchTree {

    private BSTNode root;
    public BinarySearchTree() {}

    public BSTNode getRoot() {
        return this.root;
    }

    public void setRoot(BSTNode root) {
        this.root = root;
    }

    /**
     * Add a new node to the list of nodes.
     * -- Automatically generated by Speacode --
     */
    public int add(String date, String name) {
        BSTNode newNode = new BSTNode(parseDate(date), name);
        if (!BSTNode.nodesList.contains(newNode))
            BSTNode.nodesList.add(newNode);
        if (root == null) {
            root = newNode;
            return BSTNode.counter;
        } else
            return root.addNode(newNode);
    }

        //video: 99767 - Binary Search Tree [Task123]
    //video: 99767 - Binary Search Tree
    //  video: 99767
             //video: 99767
        public void search(String date){
        if (this.root == null)
            System.out.println("root is null");
        else
            this.root.searchNode(parseDate(date));
    }

//doc: 99747 - doc1 [bla]
    //doc: 99747 - doc1
    //doc: 99747
//   doc : 99747
public void remove(String removeNodeDate) {
        if (this.root == null)
            System.out.println("root is null");
        else {
            if (this.root.getDateOfBirth().isEqual(parseDate(removeNodeDate))) {
                System.out.println("Removes root");
                BSTNode auxRoot = new BSTNode(LocalDate.MIN,"dummyRoot");
                auxRoot.setLeft(this.root);
                this.root.removeNode(parseDate(removeNodeDate) , auxRoot);
                root = auxRoot.getLeft();

            } else {
                System.out.println("Removes Node");
                this.root.removeNode(parseDate(removeNodeDate) , null);
            }
        }
    }

    /**
     *  Get the day of the given date
     *  -- Automatically generated by Speacode --
     */
    public int getDay(String date){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
        LocalDate currentDate =  LocalDate.parse(date + "01", formatter);
        return currentDate.getDayOfWeek().getValue();
    }

    public void printBySeniority(){
        root.printAll();
    }

    public LocalDate parseDate(String date){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
        return LocalDate.parse(date+"01", formatter);
    }
}
